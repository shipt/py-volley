[tool.poetry]
name = "py_volley"
version = "1.2.0"
description = "Pluggable message queueing for Python"
authors = ["Shipt <shipt@shipt.com>"]
readme = "README.md"

packages = [{ include = "volley" }]

[tool.poetry.urls]
"Homepage" = "https://github.com/shipt/py-volley"
"Repository" = "https://github.com/shipt/py-volley"
"Documentation" = "https://shipt.github.io/py-volley/"

[tool.poetry.dependencies]
python = "^3.8.1"
prometheus-client = "^0"
pydantic = "^2.1.0"
PyYAML = "^6.0.0"
orjson = "^3.6.4"
msgpack = "^1.0.3"
starlette = "^0"
uvicorn = "^0"

confluent-kafka = { version = "^2.0.0", optional = true }
PyRSMQ = { version = "^0.4.5", optional = true }
hiredis = { version = "^2.0", optional = true }
tenacity = { version = "^8.0.1", optional = true }
pyzmq = { version = ">=22.3.0", optional = true }

[tool.poetry.extras]
all = ["confluent-kafka", "PyRSMQ", "hiredis", "tenacity", "pyzmq"]
rsmq = ["PyRSMQ", "hiredis", "tenacity"]
kafka = ["confluent-kafka"]
zmq = ["pyzmq"]

[tool.poetry.dev-dependencies]
ruff = "^0"
black = "^22.3.0"
Jinja2 = "<3.0.0"
MarkupSafe = "2.0.1"
mdx-include = "^1.4.1"
mkdocs = "^1.2.3"
mkdocs-markdownextradata-plugin = "^0.2.4"
mkdocs-material = "^7.3.6"
mkdocstrings = "^0.16.2"
mypy = "^1.0.0"
psycopg2-binary = "^2.9.2"
pylint = "^2.12.1"
pytest = "^7.2"
pytest-asyncio = "^0.16.0"
pytest-cov = "^3.0.0"
SQLAlchemy = "^1.4.27"
types-pytz = "^2021.3.0"
types-PyYAML = "^6.0.3"
types-redis = "^4.1.10"
types-requests = "^2.25.11"

[tool.coverage]
run.omit = ["./example/*", "./example.py", "./tests/*"]
report.show_missing = true
report.fail_under = 98

[tool.black]
line-length = 120
target-versions = ['py310', 'py39', 'py38']

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"

markers = ["integration: mark a test as an integration test"]

[tool.pylint.master]
ignore = "example"

[tool.pylint.messages_control]
disable = "all"
enable = [
    "abstract-method",
    "arguments-differ",
    "differing-param-doc",
    "differing-type-doc",
    "invalid-overridden-method",
    "logging-fstring-interpolation",
    "missing-param-doc",
    "missing-raises-doc",
    "missing-return-doc",
    "missing-return-type-doc",
    "missing-yield-doc",
    "missing-yield-type-doc",
    "multiple-constructor-doc",
    "protected-access",
    "redundant-returns-doc",
    "redundant-yields-doc",
    "signature-differs",
    "super-init-not-called",
    "unused-argument",
    "unused-variable",
    "useless-object-inheritance",
]

[tool.mypy]
# source: https://github.com/psf/black/blob/master/mypy.ini
#  with modifications
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
python_version = "3.9"
platform = "linux"

show_column_numbers = true
follow_imports = "normal"

ignore_missing_imports = true

disallow_untyped_calls = false
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true

disallow_untyped_defs = true
check_untyped_defs = true

cache_dir = "/dev/null"

[tool.ruff]
# Commented out rulesets are extra checks for more strictness
select = [
    "E",     # pycodestyle
    "F",     # pyflakes
    "I",     # isort
    "A",     # flake8-builtins
    "ASYNC", # flake8-async
    "C4",    # flake8-comprehensions
    # "DTZ",   # flake8-datetimez
    # "T20",   # flake8-print
    # flake8-bandit
    "S102",
    "S110",
    "S112",
    "S301",
    "S324",
    "S501",
    "S506",
    # flake8-bugbear
    "B006",
    "B007",
    "B008",
    "B904",
    "B905",
    # pyupgrade
    "UP008",
    "UP010",
    # pylint refactor
    "PLR5501",
    # pylint error
    "PLE1142",
    # pylint convention
    "PLC1901",
    # mccabe
    "C901",
    # flake8-simplify
    "SIM108",
    "SIM110",
    "SIM115",
    # pygrep-hooks
    "PGH001",
    # Ruff-specific rules
    "RUF006",
    "RUF008",
    "RUF009",
    ## docstrings
    "D300",
    "D402",
    "D417",
    "D418",
    "D419",
]
ignore = ["A003"] #, "DTZ005", "DTZ011"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = []

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google" # Accepts: "google", "numpy", or "pep257".

[tool.ruff.per-file-ignores]
# Ignore specific rules in this section
"stubs/**/*" = ["D"]
"tests/**/*.py" = ["D"]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
